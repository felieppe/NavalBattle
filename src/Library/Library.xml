<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Library</name>
    </assembly>
    <members>
        <member name="T:Library.Board">
            <summary>
            Clase tablero.
            </summary>
        </member>
        <member name="P:Library.Board.rows">
            <summary>
            Valor de las filas
            </summary>
            <value> Valor de las filas </value>
        </member>
        <member name="P:Library.Board.columns">
            <summary>
            Valor de las columnas.
            </summary>
            <value> Valor de las columnas </value>
        </member>
        <member name="P:Library.Board.board">
            <summary>
            Formato del tablero.
            </summary>
            <value> Formato del tablero </value>
        </member>
        <member name="M:Library.Board.#ctor(System.Int32,System.Int32)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Library.Board"/>.
            </summary>
            <param name="rows"> Filas. </param>
            <param name="columns"> Columnas. </param> 
        </member>
        <member name="M:Library.Board.InitializeBoard">
            <summary>
            Nuevo tablero con índice de fila y columna.
            </summary>
        </member>
        <member name="M:Library.Board.SetBoard(Library.Board,System.Int32,System.Int32)">
            <summary>
            Set de la clase Board.
            </summary>
            <param name="b"> Tablero. </param>
            <param name="rows"> Filas. </param>
            <param name="columns"> Columnas. </param>
        </member>
        <member name="M:Library.Board.GetBoard">
            <summary>
            Get de la clase Board.
            </summary>
            <returns> Tablero. </returns>
        </member>
        <member name="M:Library.Board.SetRows(System.Int32)">
            <summary>
            Establece el número de filas.
            </summary>
            <param name="rows"> Filas del tablero. </param>
            <returns> Número par de filas de tablero entre 8 y 20. </returns>
        </member>
        <member name="M:Library.Board.SetColumns(System.Int32)">
            <summary>
            Establece el número de columnas.
            </summary>
            <param name="columns"> Columnas del tablero. </param>
            <returns> Número par de columnas de tablero entre 8 y 20. </returns>
        </member>
        <member name="M:Library.Board.GetRows">
            <summary>
            Devuelve las filas del tablero.
            </summary>
            <returns> Las filas del tablero. </returns>
        </member>
        <member name="M:Library.Board.GetColumns">
            <summary>
            Devuelve las columnas del tablero.
            </summary>
            <returns> Las columnas del tablero. </returns>
        </member>
        <member name="T:Library.Coords">
            <summary>
            Clase que representa las coordenadas del barco.
            </summary>
        </member>
        <member name="P:Library.Coords.shipId">
            <summary>
            Id del barco al que se le relaciona la coordenada.
            </summary>
            <value> Valor del Id del barco </value>
        </member>
        <member name="P:Library.Coords.x">
            <summary>
            Coordenada X.
            </summary>
            <value> Integrar </value>
        </member>
        <member name="P:Library.Coords.y">
            <summary>
            Coordenada Y.
            </summary>
            <value> Integrar. </value>
        </member>
        <member name="M:Library.Coords.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Library.Coords"/>.
            </summary>
            <param name="id"> Id del barco. </param>
            <param name="x"> Coordenada x del barco. </param>
            <param name="y"> Coordenada y del barco. </param>
        </member>
        <member name="M:Library.Coords.GetShipId">
            <summary>
            Devuelve el Id del barco.
            </summary>
            <returns> Id del barco. </returns>
        </member>
        <member name="M:Library.Coords.GetX">
            <summary>
            Devuelve la coordenada x del barco.
            </summary>
            <returns> Coordenada x del barco. </returns>
        </member>
        <member name="M:Library.Coords.GetY">
            <summary>
            Devuelve la coordenada y del barco.
            </summary>
            <returns> Coordenada y del barco. </returns>
        </member>
        <member name="T:Library.Game">
            <summary>
            Esta clase representa una partida.
            </summary>
        </member>
        <member name="F:Library.Game.gameId">
            <summary>
            Id del juego.
            </summary>
            <value> Id </value>
        </member>
        <member name="F:Library.Game.name">
            <summary>
            Nombre de la sesión.
            </summary>
            <value> String </value>
        </member>
        <member name="F:Library.Game.status">
            <summary>
            Estado de la sesión.
            </summary>
            <value> GameStatusType </value>
        </member>
        <member name="F:Library.Game.shipsCoords">
            <summary>
            Lista de coordenadas de los barcos en el juego.
            </summary>
            <value> Lista con elementos de tipo Coords. </value>
        </member>
        <member name="F:Library.Game.ships">
            <summary>
            Lista de barcos ubicados en el tablero del juego.
            </summary>
            <value> Lista con elementos de tipo Ship. </value>
        </member>
        <member name="F:Library.Game.totalShips">
            <summary>
            Conteo de la cantidad de barcos que se pueden colocar
            </summary>
            <value> Integer </value>
        </member>
        <member name="F:Library.Game.players">
            <summary>
            Lista de jugadores del juego.
            </summary>
            <value> Lista con elementos de tipo Player. </value>
        </member>
        <member name="P:Library.Game.Admin">
            <summary>
            Jugador administrador de la partida.
            </summary>
        </member>
        <member name="P:Library.Game.rows">
            <summary>
            Filas del tablero.
            </summary>
        </member>
        <member name="P:Library.Game.columns">
            <summary>
            Columnas del tablero.
            </summary>
        </member>
        <member name="F:Library.Game.board1">
            <summary>
            Tablero del jugador 1.
            </summary>
        </member>
        <member name="F:Library.Game.board2">
            <summary>
            Tablero del jugador 2.
            </summary>
        </member>
        <member name="M:Library.Game.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Library.Game"/>.
            </summary>
        </member>
        <member name="M:Library.Game.AddPlayer(Library.Player)">
            <summary>
            Agrega jugadores a la partida.
            </summary>
        </member>
        <member name="M:Library.Game.SetGameId(System.String)">
            <summary>
            Set el Id del juego.
            </summary>
            <param name="id"> Id del juego. </param>
        </member>
        <member name="M:Library.Game.SetGameSession(System.String)">
            <summary>
            Establece el nombre de la sesion.
            </summary>
            <param name="name"> Nombre de la sesion. </param>
        </member>
        <member name="M:Library.Game.SetStatus(Library.utils.core.GameStatusType)">
            <summary>
            Establece el estado de la sesion.
            </summary>
            <param name="status"> Estado de la sesion </param>
        </member>
        <member name="M:Library.Game.SetAdmin(Library.Player)">
            <summary>
            Establece un jugador como administrador de la partida.
            </summary>
        </member>
        <member name="M:Library.Game.RemovePlayer(Library.Player)">
            <summary>
            Elimina un jugador del game.
            </summary>
        </member>
        <member name="M:Library.Game.SetBoard1(Library.Board)">
            <summary>
            Establece el board1.
            </summary>
        </member>
        <member name="M:Library.Game.SetBoard2(Library.Board)">
            <summary>
            Establece el board2.
            </summary>
        </member>
        <member name="M:Library.Game.AddShipCoords(System.String,System.Int32,System.Int32)">
            <summary>
            Agrega las coordenadas del barco.
            </summary>
            <param name="id"> Id del barco. </param>
            <param name="x"> Coordenada x. </param>
            <param name="y"> Coordenada y. </param>
        </member>
        <member name="M:Library.Game.AddShip(Library.Ship)">
            <summary>
            Agrega un barco. 
            </summary>
            <param name="ship"> Agrega un barco. </param>
        </member>
        <member name="M:Library.Game.UpdateShip(Library.Ship,Library.Ship)">
            <summary>
            Actualiza el estado del barco. 
            </summary>
            <param name="ship"> Barco actual. </param>
            <param name="updated"> Barco actualizado. </param>
        </member>
        <member name="M:Library.Game.GetPlayers">
            <summary>
            Devuelve la lista de jugadores.
            </summary>
            <returns> Lista de jugadores. </returns>
        </member>
        <member name="M:Library.Game.GetGameId">
            <summary>
            Devuelve el Id del juego.
            </summary>
            <returns> Id del juego. </returns>
        </member>
        <member name="M:Library.Game.GetSessionName">
            <summary>
            Devuelve el nombre de la sesion.
            </summary>
            <returns> String </returns>
        </member>
        <member name="M:Library.Game.GetStatus">
            <summary>
            Devuelve el estado de la sesion.
            </summary>
            <returns> GameStatusType </returns>
        </member>
        <member name="M:Library.Game.GetShipsCoords">
            <summary>
            Devuelve las coordenadas del barco.
            </summary>
            <returns> Coordenadas del barco. </returns>
        </member>
        <member name="M:Library.Game.GetShips">
            <summary>
            Devuelve la lista de barcos.
            </summary>
            <returns> Lista de barcos. </returns>
        </member>
        <member name="M:Library.Game.GetTotalShips">
            <summary>
            Devuelve la cantidad de barcos.
            </summary>
            <returns> La cantidad de barcos. </returns>
        </member>
        <member name="M:Library.Game.GetBoard1">
            <summary>
            Devuelve el tablero 1.
            </summary>
            <returns> El tablero 1. </returns>
        </member>
        <member name="M:Library.Game.GetBoard2">
            <summary>
            Devuelve el tablero 2.
            </summary>
            <returns> El tablero 2. </returns>
        </member>
        <member name="M:Library.Game.GetAdmin">
            <summary>
            Devuelve el administrador de la partida.
            </summary>
            <returns> Administrador de la partida. </returns>
        </member>
        <member name="T:Library.GameLogic">
            <summary>
            Esta clase contiene la lógica del juego.
            </summary>
        </member>
        <member name="F:Library.GameLogic.game">
            <summary>
            Instancia del juego
            </summary>
        </member>
        <member name="F:Library.GameLogic.board">
            <summary>
            Instancia del tablero 1
            </summary>
        </member>
        <member name="F:Library.GameLogic.rows">
            <summary>
            Instancia del boardSize
            </summary>
        </member>
        <member name="F:Library.GameLogic.columns">
            <summary>
            Columnas del tablero.
            </summary>
        </member>
        <member name="F:Library.GameLogic.numberAttack">
            <summary>
            Conteo del numero de ataques
            </summary>
        </member>
        <member name="M:Library.GameLogic.#ctor(Library.Game,Library.Board)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Library.GameLogic"/>.
            </summary>
            <param name="game"> Juego. </param>
            <param name="board"> Tablero del jugador 1.</param>
            <param name="board2"> Tablero del jugador 2. </param>
        </member>
        <member name="M:Library.GameLogic.VerifyAttack(System.Int32,System.Int32)">
            <summary>
            Verifica el ataque.
            </summary>
            <param name="column"> Columna ingresada. </param>
            <param name="row"> Fila ingresada. </param>
            <returns> Hit or miss (true or false). </returns>
        </member>
        <member name="M:Library.GameLogic.PlaceShip(Library.Ship,System.Char,System.Int32,System.String)">
            <summary>
            Ubica los barcos al iniciar la partida.
            </summary>
            <param name="ship"> Barco. </param>
            <param name="row"> Fila del tablero. </param>
            <param name="column"> Columna del tablero. </param>
            <param name="facing"> Sentido hacia donde apunta el barco. </param>
        </member>
        <member name="M:Library.GameLogic.Attack(System.Char,System.Int32)">
            <summary>
            Ataque.
            </summary>
            <param name="row"> Fila ingresada. </param>
            <param name="column"> Columna ingresada. </param>
        </member>
        <member name="M:Library.GameLogic.Turn">
            <summary>
            Determina el turno del jugador.
            </summary>
        </member>
        <member name="M:Library.GameLogic.GetBoard">
            <summary>
            Devuelve el tablero actualizado por el GameLogic.
            </summary>
            <returns>El tablero</returns>
        </member>
        <member name="M:Library.GameLogic.LetterToNumber(System.Char)">
            <summary>
            Devuelve el número correspondiente a la letra en orden alfabético.
            </summary>
            <param name="row">Fila</param>
            <returns>El tablero</returns>
        </member>
        <member name="M:Library.GameLogic.CheckBoundaries(System.Int32,System.Int32)">
            <summary>
            Verifica que una coordenada no esté fuera de los limites del mapa.
            </summary>
            <param name="row">Fila</param>
            <param name="column">Columna</param>
            <returns>true/false</returns>
        </member>
        <member name="M:Library.GameLogic.DestroyShip(System.Int32,System.Int32)">
            <summary>
            Destruye el barco del tablero.
            </summary>
            <param name="row">Fila</param>
            <param name="column">Columna</param>
            <returns>true/false</returns>
        </member>
        <member name="M:Library.GameLogic.GetNumberAttack">
            <summary>
            Devuelve el número de ataques.
            </summary>
            <returns> El número de ataques. </returns>
        </member>
        <member name="M:Library.GameLogic.GetGame">
            <summary>
            Devuelve el juego.
            </summary>
            <returns> Juego. </returns>
        </member>
        <member name="T:Library.Player">
            <summary>
            Esta clase representa un jugador.
            </summary>
        </member>
        <member name="P:Library.Player.Id">
            <summary>
            Id del jugador.
            </summary>
            <value> Id. </value>
        </member>
        <member name="P:Library.Player.TelegramId">
            <summary>
            Id del usuario de telegram, vinculado al jugador.
            </summary>
            <value> Id. </value>
        </member>
        <member name="P:Library.Player.Username">
            <summary>
            Nombre de usuario del jugador.
            </summary>
            <value> Username. </value>
        </member>
        <member name="M:Library.Player.#ctor">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Library.Player"/>.
            </summary>
        </member>
        <member name="M:Library.Player.SetId(System.String)">
            <summary>
            Establece el ID del jugador.
            </summary>
            <param name="id"> Id. </param>
        </member>
        <member name="M:Library.Player.SetTelegramId(System.String)">
            <summary>
            Establece el Telegram ID del jugador.
            </summary>
            <param name="id"> Id. </param>
        </member>
        <member name="M:Library.Player.SetUsername(System.String)">
            <summary>
            Establece el username del jugador.
            </summary>
            <param name="username"> Username. </param>
        </member>
        <member name="M:Library.Player.GetId">
            <summary>
            Obtiene el ID del jugador.
            </summary>
            <returns> El ID del jugador. </returns>
        </member>
        <member name="M:Library.Player.GetTelegramId">
            <summary>
            Obtiene el Telegram ID del jugador.
            </summary>
            <returns> El Telegram ID del jugador. </returns>
        </member>
        <member name="M:Library.Player.GetUsername">
            <summary>
            Obtiene el username del jugador.
            </summary>
            <returns> El Username del jugador. </returns>
        </member>
        <member name="T:Library.handlers.JoinServerHandler">
            <summary>
            Un "handler" del patrón Chain of Responsibility que implementa los comandos "servers" y "join".
            </summary>
        </member>
        <member name="M:Library.handlers.JoinServerHandler.#ctor(Library.handlers.core.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Library.handlers.PlayHandler"/>.
            </summary>
            <param name="next"> El próximo "handler". </param>
        </member>
        <member name="M:Library.handlers.JoinServerHandler.InternalHandle(Telegram.Bot.Types.Message,Library.bot.Response@)">
            <summary>
            Procesa el mensaje "servers" y retorna true; retorna false en caso contrario.
            </summary>
            <param name="message"> El mensaje a procesar. </param>
            <param name="response"> La respuesta al mensaje procesado. </param>
            <returns> true si el mensaje fue procesado; false en caso contrario. </returns>
        </member>
        <member name="T:Library.handlers.LeaveServerHandler">
            <summary>
            Un "handler" del patrón Chain of Responsibility que implementa los comandos "servers" y "join".
            </summary>
        </member>
        <member name="M:Library.handlers.LeaveServerHandler.#ctor(Library.handlers.core.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Library.handlers.PlayHandler"/>.
            </summary>
            <param name="next"> El próximo "handler". </param>
        </member>
        <member name="M:Library.handlers.LeaveServerHandler.InternalHandle(Telegram.Bot.Types.Message,Library.bot.Response@)">
            <summary>
            Procesa el mensaje "servers" y retorna true; retorna false en caso contrario.
            </summary>
            <param name="message"> El mensaje a procesar. </param>
            <param name="response"> La respuesta al mensaje procesado. </param>
            <returns> true si el mensaje fue procesado; false en caso contrario. </returns>
        </member>
        <member name="T:Library.handlers.ReturnHandler">
            <summary>
            Un "handler" del patrón Chain of Responsibility que implementa los comandos "servers" y "join".
            </summary>
        </member>
        <member name="M:Library.handlers.ReturnHandler.#ctor(Library.handlers.core.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Library.handlers.PlayHandler"/>.
            </summary>
            <param name="next"> El próximo "handler". </param>
        </member>
        <member name="M:Library.handlers.ReturnHandler.InternalHandle(Telegram.Bot.Types.Message,Library.bot.Response@)">
            <summary>
            Procesa el mensaje "servers" y retorna true; retorna false en caso contrario.
            </summary>
            <param name="message"> El mensaje a procesar. </param>
            <param name="response"> La respuesta al mensaje procesado. </param>
            <returns> true si el mensaje fue procesado; false en caso contrario. </returns>
        </member>
        <member name="T:Library.handlers.ShowServerHandler">
            <summary>
            Un "handler" del patrón Chain of Responsibility que implementa los comandos "servers" y "join".
            </summary>
        </member>
        <member name="M:Library.handlers.ShowServerHandler.#ctor(Library.handlers.core.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Library.handlers.PlayHandler"/>.
            </summary>
            <param name="next"> El próximo "handler". </param>
        </member>
        <member name="M:Library.handlers.ShowServerHandler.InternalHandle(Telegram.Bot.Types.Message,Library.bot.Response@)">
            <summary>
            Procesa el mensaje "servers" y retorna true; retorna false en caso contrario.
            </summary>
            <param name="message"> El mensaje a procesar. </param>
            <param name="response"> La respuesta al mensaje procesado. </param>
            <returns> true si el mensaje fue procesado; false en caso contrario. </returns>
        </member>
        <member name="T:Library.handlers.ShowServerPlayersHandler">
            <summary>
            Un "handler" del patrón Chain of Responsibility que implementa los comandos "servers" y "join".
            </summary>
        </member>
        <member name="M:Library.handlers.ShowServerPlayersHandler.#ctor(Library.handlers.core.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Library.handlers.PlayHandler"/>.
            </summary>
            <param name="next"> El próximo "handler". </param>
        </member>
        <member name="M:Library.handlers.ShowServerPlayersHandler.InternalHandle(Telegram.Bot.Types.Message,Library.bot.Response@)">
            <summary>
            Procesa el mensaje "servers" y retorna true; retorna false en caso contrario.
            </summary>
            <param name="message"> El mensaje a procesar. </param>
            <param name="response"> La respuesta al mensaje procesado. </param>
            <returns> true si el mensaje fue procesado; false en caso contrario. </returns>
        </member>
        <member name="T:Library.handlers.WaitGameHandler">
            <summary>
            Un "handler" del patrón Chain of Responsibility que implementa los comandos "servers" y "join".
            </summary>
        </member>
        <member name="M:Library.handlers.WaitGameHandler.#ctor(Library.handlers.core.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Library.handlers.PlayHandler"/>.
            </summary>
            <param name="next"> El próximo "handler". </param>
        </member>
        <member name="M:Library.handlers.WaitGameHandler.InternalHandle(Telegram.Bot.Types.Message,Library.bot.Response@)">
            <summary>
            Procesa el mensaje "servers" y retorna true; retorna false en caso contrario.
            </summary>
            <param name="message"> El mensaje a procesar. </param>
            <param name="response"> La respuesta al mensaje procesado. </param>
            <returns> true si el mensaje fue procesado; false en caso contrario. </returns>
        </member>
        <member name="T:Library.handlers.CreateHandler">
            <summary>
            Un "handler" del patrón Chain of Responsibility que implementa el comando "hola".
            </summary>
        </member>
        <member name="M:Library.handlers.CreateHandler.#ctor(Library.handlers.core.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Library.handlers.PlayHandler"/>.
            </summary>
            <param name="next">El próximo "handler".</param>
        </member>
        <member name="M:Library.handlers.CreateHandler.InternalHandle(Telegram.Bot.Types.Message,Library.bot.Response@)">
            <summary>
            Procesa el mensaje "hola" y retorna true; retorna false en caso contrario.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario.</returns>
        </member>
        <member name="T:Library.handlers.MenuHandler">
            <summary>
            Un "handler" del patrón Chain of Responsibility que implementa el comando "hola".
            </summary>
        </member>
        <member name="M:Library.handlers.MenuHandler.#ctor(Library.handlers.core.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Library.handlers.PlayHandler"/>.
            </summary>
            <param name="next">El próximo "handler".</param>
        </member>
        <member name="M:Library.handlers.MenuHandler.InternalHandle(Telegram.Bot.Types.Message,Library.bot.Response@)">
            <summary>
            Procesa el mensaje "hola" y retorna true; retorna false en caso contrario.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario.</returns>
        </member>
        <member name="T:Library.handlers.PlayHandler">
            <summary>
            Un "handler" del patrón Chain of Responsibility que implementa el comando "play".
            </summary>
        </member>
        <member name="M:Library.handlers.PlayHandler.#ctor(Library.handlers.core.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Library.handlers.PlayHandler"/>.
            </summary>
            <param name="next"> El próximo "handler". </param>
        </member>
        <member name="M:Library.handlers.PlayHandler.InternalHandle(Telegram.Bot.Types.Message,Library.bot.Response@)">
            <summary>
            Procesa el mensaje "play" y retorna true; retorna false en caso contrario.
            </summary>
            <param name="message"> El mensaje a procesar. </param>
            <param name="response"> La respuesta al mensaje procesado. </param>
            <returns> true si el mensaje fue procesado; false en caso contrario. </returns>
        </member>
        <member name="T:Library.handlers.ServersListHandler">
            <summary>
            Un "handler" del patrón Chain of Responsibility que implementa los comandos "servers" y "join".
            </summary>
        </member>
        <member name="M:Library.handlers.ServersListHandler.#ctor(Library.handlers.core.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Library.handlers.PlayHandler"/>.
            </summary>
            <param name="next"> El próximo "handler". </param>
        </member>
        <member name="M:Library.handlers.ServersListHandler.InternalHandle(Telegram.Bot.Types.Message,Library.bot.Response@)">
            <summary>
            Procesa el mensaje "servers" y retorna true; retorna false en caso contrario.
            </summary>
            <param name="message"> El mensaje a procesar. </param>
            <param name="response"> La respuesta al mensaje procesado. </param>
            <returns> true si el mensaje fue procesado; false en caso contrario. </returns>
        </member>
        <member name="P:Library.handlers.core.BaseHandler.Next">
            <summary>
            Obtiene el próximo "handler".
            </summary>
            <value>El "handler" que será invocado si este "handler" no procesa el mensaje.</value>
        </member>
        <member name="P:Library.handlers.core.BaseHandler.Keywords">
            <summary>
            Obtiene o asigna el conjunto de palabras clave que este "handler" puede procesar.
            </summary>
            <value>Un array de palabras clave.</value>
        </member>
        <member name="M:Library.handlers.core.BaseHandler.#ctor(Library.IHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Library.handlers.core.BaseHandler"/>.
            </summary>
            <param name="next">El próximo "handler".</param>
        </member>
        <member name="M:Library.handlers.core.BaseHandler.#ctor(System.String[],Library.handlers.core.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Library.handlers.core.BaseHandler"/> con una lista de comandos.
            </summary>
            <param name="keywords">La lista de comandos.</param>
            <param name="next">El próximo "handler".</param>
        </member>
        <member name="M:Library.handlers.core.BaseHandler.InternalHandle(Telegram.Bot.Types.Message,Library.bot.Response@)">
            <summary>
            Este método debe ser sobreescrito por las clases sucesores. La clase sucesora procesa el mensaje y asigna
            la respuesta al mensaje.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
        </member>
        <member name="M:Library.handlers.core.BaseHandler.InternalCancel(Telegram.Bot.Types.Message)">
            <summary>
            Este método puede ser sobreescrito en las clases sucesores que procesan varios mensajes cambiando de estado
            entre mensajes deben sobreescribir este método para volver al estado inicial. En la clase base no hace nada.
            </summary>
        </member>
        <member name="M:Library.handlers.core.BaseHandler.CanHandle(Telegram.Bot.Types.Message)">
            <summary>
            Determina si este "handler" puede procesar el mensaje. En la clase base se utiliza el array
            <see cref="P:Library.handlers.core.BaseHandler.Keywords"/> para buscar el texto en el mensaje ignorando mayúsculas y minúsculas. Las
            clases sucesores pueden sobreescribir este método para proveer otro mecanismo para determina si procesan o no
            un mensaje.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <returns>true si el mensaje puede ser pocesado; false en caso contrario.</returns>
        </member>
        <member name="M:Library.handlers.core.BaseHandler.Handle(Telegram.Bot.Types.Message,Library.bot.Response@)">
            <summary>
            Procesa el mensaje o lo pasa al siguiente "handler" si existe.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
            <returns>El "handler" que procesó el mensaje si el mensaje fue procesado; null en caso contrario.</returns>
        </member>
        <member name="M:Library.handlers.core.BaseHandler.Cancel(Telegram.Bot.Types.Message)">
            <summary>
            Retorna este "handler" al estado inicial. En los "handler" sin estado no hace nada. Los "handlers" que
            procesan varios mensajes cambiando de estado entre mensajes deben sobreescribir este método para volver al
            estado inicial.
            </summary>
        </member>
        <member name="P:Library.IHandler.Next">
            <summary>
            Obtiene el próximo "handler".
            </summary>
            <value>El "handler" que será invocado si este "handler" no procesa el mensaje.</value>
        </member>
        <member name="M:Library.IHandler.Handle(Telegram.Bot.Types.Message,Library.bot.Response@)">
            <summary>
            Procesa el mensaje o la pasa al siguiente "handler" si existe.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
            <returns>El "handler" que procesó el mensaje si el mensaje fue procesado; null en caso contrario.</returns>
        </member>
        <member name="M:Library.IHandler.Cancel(Telegram.Bot.Types.Message)">
            <summary>
            Retorna este "handler" al estado inicial y cancela el próximo "handler" si existe. Es utilizado para que los
            "handlers" que procesan varios mensajes cambiando de estado entre mensajes puedan volver al estado inicial en
            caso de error por ejemplo.
            </summary>
        </member>
        <member name="T:Library.IShip">
            <summary>
            Interfaz IShip.
            </summary>
        </member>
        <member name="P:Library.IShip.ShipId">
            <summary>
            Identificación del barco.
            </summary>
            <value> Identificación. </value>
        </member>
        <member name="P:Library.IShip.Name">
            <summary>
            Nombre.
            </summary>
            <value> Nombre del barco. </value>
        </member>
        <member name="P:Library.IShip.Length">
            <summary>
            Largo.
            </summary>
            <value> Largo del barco. </value>
        </member>
        <member name="P:Library.IShip.Sunken">
            <summary>
            Hundido.
            </summary>
            <value> Estado del barco. </value>
        </member>
        <member name="M:Library.IShip.GetSunken">
            <summary>
            Obtiene el estado del barco.
            </summary>
            <returns> El estado del barco. </returns>
        </member>
        <member name="M:Library.IShip.Sink">
            <summary>
            Establece el estado del barco.
            </summary>
        </member>
        <member name="T:Library.ServerManager">
            <summary>
            Clase que administra las partidas en curso.
            </summary>
        </member>
        <member name="F:Library.ServerManager.instance">
            <summary>
            Instancia de Singleton
            </summary>
            <value> Instancia de ServerManager</value>
        </member>
        <member name="F:Library.ServerManager.Servers">
            <summary>
            Lista de partidas.
            </summary>
            <value> Lista de partidas</value>
        </member>
        <member name="M:Library.ServerManager.AddGame(Library.Game)">
            <summary>
            Agrega un juego al servidor.
            </summary>
            <param name="game"> Juego. </param>
        </member>
        <member name="M:Library.ServerManager.RemoveGame(System.String)">
            <summary>
            Elimina un juego del servidor.
            </summary>
            <param name="id"> Id del juego. </param>
        </member>
        <member name="M:Library.ServerManager.GetListing">
            <summary>
            Devuelve la lista de juegos.
            </summary>
            <returns> Lista de juegos. </returns>
        </member>
        <member name="M:Library.ServerManager.GetGame(System.String)">
            <summary>
            Devuelve un juego a partir de su Id.
            </summary>
            <param name="id"> Id del juego. </param>
            <returns> Juego. </returns>
        </member>
        <member name="T:Library.UserManager">
            <summary>
            Esta clase representa al administrador de usuarios.
            </summary>
        </member>
        <member name="F:Library.UserManager.players">
            <summary>
            Lista de jugadores registrados en el UserManager.
            </summary>
            <value> Lista con elementos de tipo Player. </value>
        </member>
        <member name="F:Library.UserManager.inGamePlayers">
            <summary>
            Lista de jugadores que actualmente están jugando.
            </summary>
            <value> Lista con elementos de tipo Player. </value>
        </member>
        <member name="F:Library.UserManager.serverManager">
            <summary>
            Instancia de Server Manager
            </summary>
        </member>
        <member name="P:Library.UserManager.Instance">
            <summary>
            Crea una única instancia de la clase UserManager.
            </summary>
        </member>
        <member name="M:Library.UserManager.#ctor">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Library.UserManager"/>.
            </summary>
        </member>
        <member name="M:Library.UserManager.AddPlayer(Library.Player)">
            <summary>
            Añade un jugador a la lista de jugadores.
            </summary>
            <param name="player"> Player. </param>
        </member>
        <member name="M:Library.UserManager.RemovePlayer(Library.Player)">
            <summary>
            Elimina un jugador en especifico de la lista de jugadores.
            </summary>
            <param name="player"> Player. </param>
        </member>
        <member name="M:Library.UserManager.RemoveInGamePlayer(Library.Player)">
            <summary>
            Elimina un jugador en especifico de la lista de jugadores in-game.
            </summary>
            <param name="player"> Player. </param>
        </member>
        <member name="M:Library.UserManager.NewGame(System.Boolean,Library.ServerManager)">
            <summary>
            Crea una partida con dos jugadores al azar que estén disponibles.
            </summary>
            <returns>
            Una partida.
            </returns>
        </member>
        <member name="M:Library.UserManager.GetPlayers">
            <summary>
            Obtiene los jugadores guardados.
            </summary>
            <returns>
            Una lista con elementos de tipo Player.
            </returns>
        </member>
        <member name="M:Library.UserManager.GetInGamePlayers">
            <summary>
            Obtiene los jugadores en juego guardados.
            </summary>
            <returns>
            Una lista con elementos de tipo Player.
            </returns>
        </member>
        <member name="M:Library.UserManager.GetPlayerById(Library.utils.core.IdType,System.String)">
            <summary>
            Obtiene un jugador mediante su id proporcionado.
            </summary>
            <returns>
            Player
            </returns>
        </member>
        <member name="M:Library.UserManager.AddInGamePlayers(Library.Game)">
            <summary>
            Añade a los jugadores de un juego a la lista de jugadores en juego.
            </summary>
            <param name="game"> Ongoing games. </param>
        </member>
        <member name="M:Library.UserManager.AddInGamePlayer(Library.Player)">
            <summary>
            Añade al jugador a la lista de jugadores en juego.
            </summary>
            <param name="player"> Jugador. </param>
        </member>
        <member name="M:Library.UserManager.AddPlayerToGame(Library.Player,System.String)">
            <summary>
            Agrega un jugador a una partida.
            </summary>
            <param name="player"> Jugador. </param>
            <param name="id"> Id del jugador. </param>
        </member>
        <member name="F:Library.Configuration.instance">
            <summary>
            Instancia de Singleton.
            </summary>
            <value>  </value>
        </member>
        <member name="F:Library.Configuration.Name">
            <summary>
            Nombre.
            </summary>
        </member>
        <member name="F:Library.Configuration.Username">
            <summary>
            Nombre de usuario.
            </summary>
        </member>
        <member name="F:Library.Configuration.Token">
            <summary>
            Token del bot.
            </summary>
        </member>
        <member name="F:Library.Configuration.Debug">
            <summary>
            Estado del Debug.
            </summary>
        </member>
        <member name="M:Library.Configuration.#ctor">
            <summary>
            Constructor de la clase
            </summary>
            <returns>  </returns>
        </member>
        <member name="M:Library.Configuration.Load">
            <summary>
            Carga la configuracion del bot.
            </summary>
            <returns>  </returns>
        </member>
        <member name="M:Library.Configuration.GetName">
            <summary>
            Obtiene el nombre.
            </summary>
            <returns> Devuelve el nombre. </returns>
        </member>
        <member name="M:Library.Configuration.GetUsername">
            <summary>
            Obtiene el Nombre de usuario
            </summary>
            <returns> Devuelve el Nombre de usuario. </returns>
        </member>
        <member name="M:Library.Configuration.GetToken">
            <summary>
            Obtiene el Token de Telegram
            </summary>
            <returns> Devuelve elToken de Telegram . </returns>
        </member>
        <member name="M:Library.Configuration.GetDebug">
            <summary>
            Obtiene el valor booleano de Debug 
            </summary>
            <returns> Devuelve el valor booleano de Debug  </returns>
        </member>
        <!-- Badly formed XML comment ignored for member "F:Library.Logger.instance" -->
        <member name="F:Library.Logger.Config">
            <summary>
            Instacia de la clase Configuration.
            </summary>
            <value> </value>
        </member>
        <member name="M:Library.Logger.Setup">
            <summary>
            Crea las carpetas que necesita el Logger para funcionar.
            </summary>
            <returns> . </returns>
        </member>
        <member name="M:Library.Logger.Log(System.String)">
            <summary>
            Escribe un mensaje en el archivo del registro.
            </summary>
            <returns>  </returns>
        </member>
        <member name="P:Library.Logger.Instance">
            <summary>
            Constructor unico.
            </summary>
            <returns> </returns>
        </member>
        <member name="M:Library.Logger.#ctor">
            <summary>
            Constructor de la clase.
            </summary>
            <returns>  </returns>
        </member>
        <member name="M:Library.Logger.Info(System.String)">
            <summary>
            Escribe un mensaje de tipo informacion en la consola.
            </summary>
            <returns>  </returns>
        </member>
        <member name="M:Library.Logger.Debug(System.String)">
            <summary>
            Escribe un mensaje de tipo Debug en la consola.
            </summary>
            <returns> </returns>
        </member>
        <member name="M:Library.Logger.Error(System.String)">
            <summary>
            Escribe un mensaje de tipo Error en la consola.
            </summary>
            <returns> </returns>
        </member>
        <member name="T:Library.Printer">
            <summary>
            Class Printer.
            </summary>
        </member>
        <member name="M:Library.Printer.#ctor">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Library.Printer"/>.
            </summary>
        </member>
        <member name="M:Library.Printer.SplitBoardVisually(System.Int32)">
            <summary>
            Imprime una linea horizontal que divide el tablero en dos.
            </summary>
            <param name="rows"> Número de filas del tablero. </param>
        </member>
        <member name="M:Library.Printer.Print(Library.Board)">
            <summary>
            Imprime el tablero
            </summary>
            <param name="board">Tablero</param>
        </member>
        <member name="T:Library.Battleship">
            <summary>
            Clase battleShip.
            </summary>
        </member>
        <member name="M:Library.Battleship.#ctor">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Library.Battleship"/>.
            </summary>
        </member>
        <member name="T:Library.Ship">
            <summary>
            Esta clase representa un barco.
            </summary>
        </member>
        <member name="P:Library.Ship.ShipId">
            <summary>
            Identificación del barco.
            </summary>
            <value> Identificación. </value>
        </member>
        <member name="P:Library.Ship.Name">
            <summary>
            Nombre del barco.
            </summary>
            <value> Nombre. </value>
        </member>
        <member name="P:Library.Ship.Length">
            <summary>
            Tamaño del barco.
            </summary>
            <value> Tamaño. </value>
        </member>
        <member name="P:Library.Ship.Sunken">
            <summary>
            Estado del hundimiento del barco.
            </summary>
            <value><c>true</c> si el barco está hundido, <c>false</c> en caso contrario.</value>
        </member>
        <member name="M:Library.Ship.#ctor(System.String,System.Int32)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Library.Ship"/>.
            </summary>
            <param name="name">Nombre del barco.</param>
            <param name="length">Tamaño del barco.</param>
        </member>
        <member name="M:Library.Ship.Sink">
            <summary>
            Hundir el barco.
            </summary>
        </member>
        <member name="M:Library.Ship.GetSunken">
            <summary>
            Obtiene el estado de hundimiento del barco.
            </summary>
            <returns>
            El valor de la variable Sunken.
            </returns>
        </member>
        <member name="M:Library.Ship.GetShipId">
            <summary>
            Devuelve el Id del barco.
            </summary>
            <returns> Id del barco. </returns>
        </member>
        <member name="T:Library.Cruise">
            <summary>
            Clase cruise.
            </summary>
        </member>
        <member name="M:Library.Cruise.#ctor">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Library.Cruise"/>.
            </summary>
        </member>
        <member name="T:Library.Destroyer">
            <summary>
            Clase destroyer.
            </summary>
        </member>
        <member name="M:Library.Destroyer.#ctor">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Library.Destroyer"/>.
            </summary>
        </member>
        <member name="T:Library.Submarine">
            <summary>
            Clase submarine.
            </summary>
        </member>
        <member name="M:Library.Submarine.#ctor">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Library.Submarine"/>.
            </summary>
        </member>
    </members>
</doc>
