<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Library</name>
    </assembly>
    <members>
        <member name="T:Library.Board">
            <summary>
            Clase tablero.
            </summary>
        </member>
        <member name="M:Library.Board.#ctor(Library.BoardSize)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Library.Board"/>.
            </summary>
            <param name="boardSize"> Boardsize.</param>
        </member>
        <member name="M:Library.Board.InitializeBoard">
            <summary>
            Nuevo tablero con índice de fila y columna.
            </summary>
        </member>
        <member name="M:Library.Board.SetBoard(Library.Board,Library.BoardSize)">
            <summary>
            Set de la clase Board.
            </summary>
            <param name="b"> Tablero. </param>
            <param name="boardSize"> Tamaño del tablero. </param>
        </member>
        <member name="M:Library.Board.GetBoard">
            <summary>
            Get de la clase Board.
            </summary>
            <returns> Tablero. </returns>
        </member>
        <member name="M:Library.Board.GetBoardSize">
            <summary>
            Devuelve tamaño del tablero.
            </summary>
            <returns> boardSize. </returns>
        </member>
        <member name="T:Library.BoardSize">
            <summary>
            Clase para establecer las dimensiones del tablero.
            </summary>
        </member>
        <member name="M:Library.BoardSize.#ctor(System.Int32,System.Int32)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Library.BoardSize"/>.
            </summary>
            <param name="rows"> Filas. </param>
            <param name="columns"> Columnas. </param>
        </member>
        <member name="F:Library.BoardSize.Rows">
            <summary>
            Filas del tablero.
            </summary>
        </member>
        <member name="F:Library.BoardSize.Columns">
            <summary>
            Columnas del tablero.
            </summary>
        </member>
        <member name="M:Library.BoardSize.SetRows(System.Int32)">
            <summary>
            Establece el número de filas.
            </summary>
            <param name="rows"> Filas del tablero. </param>
            <returns> Número par de filas de tablero entre 8 y 20. </returns>
        </member>
        <member name="M:Library.BoardSize.SetColumns(System.Int32)">
            <summary>
            Establece el número de columnas.
            </summary>
            <param name="columns"> Columnas del tablero. </param>
            <returns> Número par de columnas de tablero entre 8 y 20. </returns>
        </member>
        <member name="M:Library.BoardSize.GetRows">
            <summary>
            Devuelve las filas del tablero.
            </summary>
            <returns> Las filas del tablero. </returns>
        </member>
        <member name="M:Library.BoardSize.GetColumns">
            <summary>
            Devuelve las columnas del tablero.
            </summary>
            <returns> Las columnas del tablero. </returns>
        </member>
        <member name="T:Library.Coords">
            <summary>
            Clase que representa las coordenadas del barco.
            </summary>
        </member>
        <member name="M:Library.Coords.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Library.Coords"/>.
            </summary>
            <param name="id"> Id del barco. </param>
            <param name="x"> Coordenada x del barco. </param>
            <param name="y"> Coordenada y del barco. </param>
        </member>
        <member name="M:Library.Coords.GetShipId">
            <summary>
            Devuelve el Id del barco.
            </summary>
            <returns> Id del barco. </returns>
        </member>
        <member name="M:Library.Coords.GetX">
            <summary>
            Devuelve la coordenada x del barco.
            </summary>
            <returns> Coordenada x del barco. </returns>
        </member>
        <member name="M:Library.Coords.GetY">
            <summary>
            Devuelve la coordenada y del barco.
            </summary>
            <returns> Coordenada y del barco. </returns>
        </member>
        <member name="T:Library.Game">
            <summary>
            Esta clase representa una partida.
            </summary>
        </member>
        <member name="F:Library.Game.Players">
            <summary>
            Lista de jugadores del juego.
            </summary>
            <value> Lista con elementos de tipo Player. </value>
        </member>
        <member name="P:Library.Game.Admin">
            <summary>
            Jugador administrador de la partida.
            </summary>
        </member>
        <member name="F:Library.Game.boardSize1">
            <summary>
            Dimensiones del tablero.
            </summary>
        </member>
        <member name="F:Library.Game.board1">
            <summary>
            Tablero del jugador 1.
            </summary>
        </member>
        <member name="F:Library.Game.board2">
            <summary>
            Tablero del jugador 2.
            </summary>
        </member>
        <member name="M:Library.Game.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Library.Game"/>.
            </summary>
        </member>
        <member name="M:Library.Game.AddPlayer(Library.Player)">
            <summary>
            Agrega jugadores a la partida.
            </summary>
        </member>
        <member name="M:Library.Game.SetGameId(System.String)">
            <summary>
            Set el Id del juego.
            </summary>
            <param name="id"> Id del juego. </param>
        </member>
        <member name="M:Library.Game.SetAdmin(Library.Player)">
            <summary>
            Establece un jugador como administrador de la partida.
            </summary>
        </member>
        <member name="M:Library.Game.AddShipCoords(System.String,System.Int32,System.Int32)">
            <summary>
            Agrega las coordenadas del barco.
            </summary>
            <param name="id"> Id del barco. </param>
            <param name="x"> Coordenada x. </param>
            <param name="y"> Coordenada y. </param>
        </member>
        <member name="M:Library.Game.AddShip(Library.Ship)">
            <summary>
            Agrega un barco. 
            </summary>
            <param name="ship"> Agrega un barco. </param>
        </member>
        <member name="M:Library.Game.UpdateShip(Library.Ship,Library.Ship)">
            <summary>
            Actualiza el estado del barco. 
            </summary>
            <param name="ship"> Barco actual. </param>
            <param name="updated"> Barco actualizado. </param>
        </member>
        <member name="M:Library.Game.GetPlayers">
            <summary>
            Devuelve la lista de jugadores.
            </summary>
            <returns> Lista de jugadores. </returns>
        </member>
        <member name="M:Library.Game.GetGameId">
            <summary>
            Devuelve el Id del juego.
            </summary>
            <returns> Id del juego. </returns>
        </member>
        <member name="M:Library.Game.GetShipsCoords">
            <summary>
            Devuelve las coordenadas del barco.
            </summary>
            <returns> Coordenadas del barco. </returns>
        </member>
        <member name="M:Library.Game.GetShips">
            <summary>
            Devuelve la lista de barcos.
            </summary>
            <returns> Lista de barcos. </returns>
        </member>
        <member name="M:Library.Game.GetTotalShips">
            <summary>
            Devuelve la cantidad de barcos.
            </summary>
            <returns> La cantidad de barcos. </returns>
        </member>
        <member name="M:Library.Game.GetBoard1">
            <summary>
            Devuelve el tablero 1.
            </summary>
            <returns> El tablero 1. </returns>
        </member>
        <member name="M:Library.Game.GetBoard2">
            <summary>
            Devuelve el tablero 2.
            </summary>
            <returns> El tablero 2. </returns>
        </member>
        <member name="M:Library.Game.GetAdmin">
            <summary>
            Devuelve el administrador de la partida.
            </summary>
            <returns> Administrador de la partida. </returns>
        </member>
        <member name="T:Library.GameLogic">
            <summary>
            Esta clase contiene la lógica del juego.
            </summary>
        </member>
        <member name="M:Library.GameLogic.#ctor(Library.Game,Library.Board,Library.Board)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Library.GameLogic"/>.
            </summary>
            <param name="game"> Juego. </param>
            <param name="board"> Tablero del jugador 1.</param>
            <param name="board2"> Tablero del jugador 2. </param>
        </member>
        <member name="M:Library.GameLogic.VerifyAttack(System.Int32,System.Int32)">
            <summary>
            Verifica el ataque.
            </summary>
            <param name="column"> Columna ingresada. </param>
            <param name="row"> Fila ingresada. </param>
            <returns> Hit or miss (true or false). </returns>
        </member>
        <member name="M:Library.GameLogic.PlaceShip(Library.Ship,System.Char,System.Int32,System.String)">
            <summary>
            Ubica los barcos al iniciar la partida.
            </summary>
            <param name="ship"> Barco. </param>
            <param name="row"> Fila del tablero. </param>
            <param name="column"> Columna del tablero. </param>
            <param name="facing"> Sentido hacia donde apunta el barco. </param>
        </member>
        <member name="M:Library.GameLogic.Attack(System.Char,System.Int32)">
            <summary>
            Ataque.
            </summary>
            <param name="row"> Fila ingresada. </param>
            <param name="column"> Columna ingresada. </param>
        </member>
        <member name="M:Library.GameLogic.Turn">
            <summary>
            Determina el turno del jugador.
            </summary>
        </member>
        <member name="M:Library.GameLogic.GetBoard">
            <summary>
            Devuelve el tablero actualizado por el GameLogic.
            </summary>
            <returns>El tablero</returns>
        </member>
        <member name="M:Library.GameLogic.LetterToNumber(System.Char)">
            <summary>
            Devuelve el número correspondiente a la letra en orden alfabético.
            </summary>
            <param name="row">Fila</param>
            <returns>El tablero</returns>
        </member>
        <member name="M:Library.GameLogic.CheckBoundaries(System.Int32,System.Int32)">
            <summary>
            Verifica que una coordenada no esté fuera de los limites del mapa.
            </summary>
            <param name="row">Fila</param>
            <param name="column">Columna</param>
            <returns>true/false</returns>
        </member>
        <member name="M:Library.GameLogic.DestroyShip(System.Int32,System.Int32)">
            <summary>
            Destruye el barco del tablero.
            </summary>
            <param name="row">Fila</param>
            <param name="column">Columna</param>
            <returns>true/false</returns>
        </member>
        <member name="M:Library.GameLogic.GetNumberAttack">
            <summary>
            Devuelve el número de ataques.
            </summary>
            <returns> El número de ataques. </returns>
        </member>
        <member name="M:Library.GameLogic.GetGame">
            <summary>
            Devuelve el juego.
            </summary>
            <returns> Juego. </returns>
        </member>
        <member name="T:Library.IShip">
            <summary>
            Interfaz IShip.
            </summary>
        </member>
        <member name="P:Library.IShip.ShipId">
            <summary>
            Identificación del barco.
            </summary>
            <value> Identificación. </value>
        </member>
        <member name="P:Library.IShip.Name">
            <summary>
            Nombre.
            </summary>
            <value> Nombre del barco. </value>
        </member>
        <member name="P:Library.IShip.Length">
            <summary>
            Largo.
            </summary>
            <value> Largo del barco. </value>
        </member>
        <member name="P:Library.IShip.Sunken">
            <summary>
            Hundido.
            </summary>
            <value> Estado del barco. </value>
        </member>
        <member name="M:Library.IShip.GetSunken">
            <summary>
            Obtiene el estado del barco.
            </summary>
            <returns> El estado del barco. </returns>
        </member>
        <member name="M:Library.IShip.Sink">
            <summary>
            Establece el estado del barco.
            </summary>
        </member>
        <member name="T:Library.Player">
            <summary>
            Esta clase representa un jugador.
            </summary>
        </member>
        <member name="P:Library.Player.Id">
            <summary>
            Id del jugador.
            </summary>
            <value> Id. </value>
        </member>
        <member name="P:Library.Player.Username">
            <summary>
            Nombre de usuario del jugador.
            </summary>
            <value> Username. </value>
        </member>
        <member name="M:Library.Player.#ctor(System.String)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Library.Player"/>.
            </summary>
            <param name="id"> Id. </param>
        </member>
        <member name="M:Library.Player.SetId(System.String)">
            <summary>
            Establece el ID del jugador.
            </summary>
            <param name="id"> Id. </param>
        </member>
        <member name="M:Library.Player.SetUsername(System.String)">
            <summary>
            Establece el username del jugador.
            </summary>
            <param name="username"> Username. </param>
        </member>
        <member name="M:Library.Player.GetId">
            <summary>
            Obtiene el ID del jugador.
            </summary>
            <returns> El ID del jugador. </returns>
        </member>
        <member name="M:Library.Player.GetUsername">
            <summary>
            Obtiene el username del jugador.
            </summary>
            <returns> El Username del jugador. </returns>
        </member>
        <member name="T:Library.Printer">
            <summary>
            Class Printer.
            </summary>
        </member>
        <member name="M:Library.Printer.#ctor">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Library.Printer"/>.
            </summary>
        </member>
        <member name="M:Library.Printer.SplitBoardVisually(System.Int32)">
            <summary>
            Imprime una linea horizontal que divide el tablero en dos.
            </summary>
            <param name="rows"> Número de filas del tablero. </param>
        </member>
        <member name="M:Library.Printer.Print(Library.Board)">
            <summary>
            Imprime el tablero
            </summary>
            <param name="board">Tablero</param>
        </member>
        <member name="T:Library.ServerManager">
            <summary>
            Clase que administra las partidas en curso.
            </summary>
        </member>
        <member name="M:Library.ServerManager.AddGame(Library.Game)">
            <summary>
            Agrega un juego al servidor.
            </summary>
            <param name="game"> Juego. </param>
        </member>
        <member name="M:Library.ServerManager.RemoveGame(System.String)">
            <summary>
            Elimina un juego del servidor.
            </summary>
            <param name="id"> Id del juego. </param>
        </member>
        <member name="M:Library.ServerManager.GetListing">
            <summary>
            Devuelve la lista de juegos.
            </summary>
            <returns> Lista de juegos. </returns>
        </member>
        <member name="M:Library.ServerManager.GetGame(System.String)">
            <summary>
            Devuelve un juego a partir de su Id.
            </summary>
            <param name="id"> Id del juego. </param>
            <returns> Juego. </returns>
        </member>
        <member name="T:Library.UserManager">
            <summary>
            Esta clase representa al administrador de usuarios.
            </summary>
        </member>
        <member name="F:Library.UserManager.players">
            <summary>
            Lista de jugadores registrados en el UserManager.
            </summary>
            <value> Lista con elementos de tipo Player. </value>
        </member>
        <member name="F:Library.UserManager.inGamePlayers">
            <summary>
            Lista de jugadores que actualmente están jugando.
            </summary>
            <value> Lista con elementos de tipo Player. </value>
        </member>
        <member name="F:Library.UserManager.ongoingGames">
            <summary>
            Lista de juegos actuales.
            </summary>
        </member>
        <member name="M:Library.UserManager.#ctor">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Library.UserManager"/>.
            </summary>
        </member>
        <member name="M:Library.UserManager.AddPlayer(Library.Player)">
            <summary>
            Añade un jugador a la lista de jugadores.
            </summary>
            <param name="player"> Player. </param>
        </member>
        <member name="M:Library.UserManager.RemovePlayer(Library.Player)">
            <summary>
            Elimina un jugador en especifico de la lista de jugadores.
            </summary>
            <param name="player"> Player. </param>
        </member>
        <member name="M:Library.UserManager.NewGame(System.Boolean,Library.ServerManager)">
            <summary>
            Crea una partida con dos jugadores al azar que estén disponibles.
            </summary>
            <returns>
            Una partida.
            </returns>
        </member>
        <member name="M:Library.UserManager.GetPlayers">
            <summary>
            Obtiene los jugadores guardados.
            </summary>
            <returns>
            Una lista con elementos de tipo Player.
            </returns>
        </member>
        <member name="M:Library.UserManager.GetInGamePlayers">
            <summary>
            Obtiene los jugadores en juego guardados.
            </summary>
            <returns>
            Una lista con elementos de tipo Player.
            </returns>
        </member>
        <member name="M:Library.UserManager.AddInGamePlayers(Library.Game)">
            <summary>
            Añade a los jugadores de un juego a la lista de jugadores en juego.
            </summary>
            <param name="game"> Ongoing games. </param>
        </member>
        <member name="M:Library.UserManager.AddPlayerToGame(Library.Player,System.Object)">
            <summary>
            Agrega un jugador a una partida.
            </summary>
            <param name="player"> Jugador. </param>
            <param name="id"> Id del jugador. </param>
        </member>
        <member name="M:Library.UserManager.FindGameById(System.Guid)">
            <summary>
            Busca un juego por el Id.
            </summary>
            <param name="gameId"> Id del juego. </param>
            <returns> Juego. </returns>
        </member>
        <member name="T:Library.Battleship">
            <summary>
            Clase battleShip.
            </summary>
        </member>
        <member name="M:Library.Battleship.#ctor">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Library.Battleship"/>.
            </summary>
        </member>
        <member name="T:Library.Ship">
            <summary>
            Esta clase representa un barco.
            </summary>
        </member>
        <member name="P:Library.Ship.ShipId">
            <summary>
            Identificación del barco.
            </summary>
            <value> Identificación. </value>
        </member>
        <member name="P:Library.Ship.Name">
            <summary>
            Nombre del barco.
            </summary>
            <value> Nombre. </value>
        </member>
        <member name="P:Library.Ship.Length">
            <summary>
            Tamaño del barco.
            </summary>
            <value> Tamaño. </value>
        </member>
        <member name="P:Library.Ship.Sunken">
            <summary>
            Estado del hundimiento del barco.
            </summary>
            <value><c>true</c> si el barco está hundido, <c>false</c> en caso contrario.</value>
        </member>
        <member name="M:Library.Ship.#ctor(System.String,System.Int32)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Library.Ship"/>.
            </summary>
            <param name="name">Nombre del barco.</param>
            <param name="length">Tamaño del barco.</param>
        </member>
        <member name="M:Library.Ship.Sink">
            <summary>
            Hundir el barco.
            </summary>
        </member>
        <member name="M:Library.Ship.GetSunken">
            <summary>
            Obtiene el estado de hundimiento del barco.
            </summary>
            <returns>
            El valor de la variable Sunken.
            </returns>
        </member>
        <member name="M:Library.Ship.GetShipId">
            <summary>
            Devuelve el Id del barco.
            </summary>
            <returns> Id del barco. </returns>
        </member>
        <member name="T:Library.Cruise">
            <summary>
            Clase cruise.
            </summary>
        </member>
        <member name="M:Library.Cruise.#ctor">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Library.Cruise"/>.
            </summary>
        </member>
        <member name="T:Library.Destroyer">
            <summary>
            Clase destroyer.
            </summary>
        </member>
        <member name="M:Library.Destroyer.#ctor">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Library.Destroyer"/>.
            </summary>
        </member>
        <member name="T:Library.Submarine">
            <summary>
            Clase submarine.
            </summary>
        </member>
        <member name="M:Library.Submarine.#ctor">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Library.Submarine"/>.
            </summary>
        </member>
    </members>
</doc>
